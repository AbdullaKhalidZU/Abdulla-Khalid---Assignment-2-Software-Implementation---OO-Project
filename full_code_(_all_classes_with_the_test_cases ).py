# -*- coding: utf-8 -*-
"""Full code ( all classes with the test cases

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JMB-VP6mD2pShSY_ND7pJQPQ2t36emDA
"""

class Artwork:
    def __init__(self, title, artist, date_of_creation, historical_significance):
        self.title = title
        self.artist = artist
        self.date_of_creation = date_of_creation
        self.historical_significance = historical_significance

    # Getter and setter methods for title
    def get_title(self):
        return self.title

    def set_title(self, title):
        self.title = title

    # Getter and setter methods for artist
    def get_artist(self):
        return self.artist

    def set_artist(self, artist):
        self.artist = artist

    # Getter and setter methods for date_of_creation
    def get_date_of_creation(self):
        return self.date_of_creation

    def set_date_of_creation(self, date_of_creation):
        self.date_of_creation = date_of_creation

    # Getter and setter methods for historical_significance
    def get_historical_significance(self):
        return self.historical_significance

    def set_historical_significance(self, historical_significance):
        self.historical_significance = historical_significance


class Exhibition:
    def __init__(self, location, duration):
        self.location = location
        self.duration = duration
        self.artworks = []

    # Getter and setter methods for location
    def get_location(self):
        return self.location

    def set_location(self, location):
        self.location = location

    # Getter and setter methods for duration
    def get_duration(self):
        return self.duration

    def set_duration(self, duration):
        self.duration = duration

    # Getter and setter methods for artworks
    def get_artworks(self):
        return self.artworks

    def add_artwork(self, artwork):
        self.artworks.append(artwork)


class Visitor:
    def __init__(self, name, age, national_id, ticket_type):
        self.name = name
        self.age = age
        self.national_id = national_id
        self.ticket_type = ticket_type

    # Getter and setter methods for name
    def get_name(self):
        return self.name

    def set_name(self, name):
        self.name = name

    # Getter and setter methods for age
    def get_age(self):
        return self.age

    def set_age(self, age):
        self.age = age

    # Getter and setter methods for national_id
    def get_national_id(self):
        return self.national_id

    def set_national_id(self, national_id):
        self.national_id = national_id

    # Getter and setter methods for ticket_type
    def get_ticket_type(self):
        return self.ticket_type

    def set_ticket_type(self, ticket_type):
        self.ticket_type = ticket_type


class Ticket:
    def __init__(self, price, visitor, exhibition=None, event=None, tour_date=None, event_date=None, group_size=0,
                 is_group=False, is_special_event=False, is_tour=False):
        self.price = price
        self.visitor = visitor
        self.exhibition = exhibition
        self.event = event
        self.tour_date = tour_date
        self.event_date = event_date
        self.group_size = group_size
        self.is_group = is_group
        self.is_special_event = is_special_event
        self.is_tour = is_tour

    # Getter and setter methods for price
    def get_price(self):
        return self.price

    def set_price(self, price):
        self.price = price

    # Getter and setter methods for visitor
    def get_visitor(self):
        return self.visitor

    def set_visitor(self, visitor):
        self.visitor = visitor

    # Getter and setter methods for exhibition
    def get_exhibition(self):
        return self.exhibition

    def set_exhibition(self, exhibition):
        self.exhibition = exhibition

    # Getter and setter methods for event
    def get_event(self):
        return self.event

    def set_event(self, event):
        self.event = event

    # Getter and setter methods for tour_date
    def get_tour_date(self):
        return self.tour_date

    def set_tour_date(self, tour_date):
        self.tour_date = tour_date

    # Getter and setter methods for event_date
    def get_event_date(self):
        return self.event_date

    def set_event_date(self, event_date):
        self.event_date = event_date

    # Getter and setter methods for group_size
    def get_group_size(self):
        return self.group_size

    def set_group_size(self, group_size):
        self.group_size = group_size

    # Getter and setter methods for is_group
    def get_is_group(self):
        return self.is_group

    def set_is_group(self, is_group):
        self.is_group = is_group

    # Getter and setter methods for is_special_event
    def get_is_special_event(self):
        return self.is_special_event

    def set_is_special_event(self, is_special_event):
        self.is_special_event = is_special_event

    # Getter and setter methods for is_tour
    def get_is_tour(self):
        return self.is_tour

    def set_is_tour(self, is_tour):
        self.is_tour = is_tour


class TicketType:
    def __init__(self, type, base_price, is_free, discount_percentage):
        self.type = type
        self.base_price = base_price
        self.is_free = is_free
        self.discount_percentage = discount_percentage

    # Getter and setter methods for type
    def get_type(self):
        return self.type

    def set_type(self, type):
        self.type = type

    # Getter and setter methods for base_price
    def get_base_price(self):
        return self.base_price

    def set_base_price(self, base_price):
        self.base_price = base_price

    # Getter and setter methods for is_free
    def is_free(self):
        return self.is_free

    def set_free(self, is_free):
        self.is_free = is_free

    # Getter and setter methods for discount_percentage
    def get_discount_percentage(self):
        return self.discount_percentage

    def set_discount_percentage(self, discount_percentage):
        self.discount_percentage = discount_percentage


class Event:
    def __init__(self, name, location, duration, price):
        self.name = name
        self.location = location
        self.duration = duration
        self.price = price

    # Getter and setter methods for name
    def get_name(self):
        return self.name

    def set_name(self, name):
        self.name = name

    # Getter and setter methods for location
    def get_location(self):
        return self.location

    def set_location(self, location):
        self.location = location

    # Getter and setter methods for duration
    def get_duration(self):
        return self.duration

    def set_duration(self, duration):
        self.duration = duration

    # Getter and setter methods for price
    def get_price(self):
        return self.price

    def set_price(self, price):
        self.price = price



# Test case A : Adding new artwork to the museum

def test_add_new_art():
    # Create a new artwork
    artwork = Artwork("Mona Lisa", "Leonardo da Vinci", "1503", "One of the most famous paintings in the world")

    # Display the details of the new artwork added to the museum
    print("New Artwork Added:")
    print("Title:", artwork.get_title())
    print("Artist:", artwork.get_artist())
    print("Date of Creation:", artwork.get_date_of_creation())
    print("Historical Significance:", artwork.get_historical_significance())

test_add_new_art()


# Test case b: Opening of a new exhibition or event at the museum

def test_open_new_exhibition():
    # Create a new exhibition
    exhibition = Exhibition("Gallery 3", "2024-10-01 to 2024-12-31")

    # Display the details of the new exhibition opened at the museum
    print("New Exhibition Opened:")
    print("Location:", exhibition.get_location())
    print("Duration:", exhibition.get_duration())

test_open_new_exhibition()


# Test case c: Purchase of tickets by an individual or tour group for an event

def test_purchase_tickets():
    # Create a new ticket for an individual
    ticket_type = TicketType("Adult", 63.0, False, 0.0)
    visitor = Visitor("Ali", 35, "123456789", "Adult")
    exhibition = Exhibition("Gallery 4", "2024-11-01 to 2024-12-31")
    ticket = Ticket(ticket_type.get_base_price(), visitor, exhibition)

    # Display the details of the purchased ticket
    print("Ticket Purchased:")
    print("Visitor Name:", visitor.get_name())
    print("Ticket Type:", visitor.get_ticket_type())
    print("Exhibition:", exhibition.get_location())
    print("Price:", ticket.get_price())

test_purchase_tickets()


# Test case d: Display of payment receipts for purchasing tickets

def test_display_payment_receipt():
    # Create payment receipts for purchased tickets
    ticket1 = Ticket(TicketType("Adult", 63.0, False, 0.0).get_base_price(), Visitor("Ahmad", 45, "987654321", "Adult"), Exhibition("Gallery 5", "2024-12-01 to 2025-02-28"))
    ticket2 = Ticket(TicketType("Child", 30.0, True, 0.0).get_base_price(), Visitor("Khalid", 10, "567890123", "Child"), Exhibition("Gallery 6", "2025-01-01 to 2025-03-31"))

    # Display payment receipts for purchased tickets
    print("Payment Receipts:")
    print("Visitor:", ticket1.get_visitor().get_name())
    print("Ticket Type:", ticket1.get_visitor().get_ticket_type())
    print("Exhibition:", ticket1.get_exhibition().get_location())
    print("Price:", ticket1.get_price())

    print("\nVisitor:", ticket2.get_visitor().get_name())
    print("Ticket Type:", ticket2.get_visitor().get_ticket_type())
    print("Exhibition:", ticket2.get_exhibition().get_location())
    print("Price:", ticket2.get_price())

test_display_payment_receipt()